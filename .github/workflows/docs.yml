name: Docs

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  docs:
    runs-on: macos-latest
    steps:
      - name: Checkout code üìÇ
        uses: actions/checkout@v4
      
      - name: Setup Rye üåæ
        id: setup-rye
        uses: eifinger/setup-rye@v3
        with:
          version: "0.35.0"

      - name: Pin python-version 3.10 üìå
        run: rye pin 3.10
      - name: Cache dependencies üì¶
        uses: actions/cache@v4
        with:
          path: ./venv
          key: venv-3.10-${{ hashFiles('requirements.lock') }}-${{ hashFiles('requirements-dev.lock') }}

      - name: Install dependencies üõ†Ô∏è
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: |
          rye sync --no-lock

      - name: Get the README üìù
        run: |
          cp README.md docs/index.md

      - name: Get the ChangeLog üìù
        run: |
          cp changelog.md docs/changelog.md

      - name: Get Version from VERSION file üè∑Ô∏è
        id: get_version
        run: |
          VERSION=$(grep -m 1 'version = ' pyproject.toml | sed -E 's/.*version = "(.*)"/\1/')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Convert Jupyter examples to Markdown üìì‚û°Ô∏èüìÑ
        run: |
          mkdir -p docs/tutorials
          if [ -d "examples" ]; then
            if ls examples/*.ipynb 1> /dev/null 2>&1; then
              for notebook in examples/*.ipynb; do
                jupyter nbconvert --to markdown "$notebook" --output-dir docs/tutorials
              done
            else
              echo "No notebooks to convert."
            fi
          else
            echo "Directory 'examples' does not exist."
          fi

      - name: Setup Docs Deployment üöÄ
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Build Docs Website üåê
        env:
          VERSION: ${{ env.VERSION }}
        run: |
          mike deploy --push --branch gh-pages --update-aliases ${VERSION} latest
          mike set-default --push --branch gh-pages latest
